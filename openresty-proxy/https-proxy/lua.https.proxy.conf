
# 必须                                                                                                      

# resolver 223.5.5.5 timeout=1s;


server {
    listen 80 default_server;
    listen 443 ssl;
    # listen 443;
    server_name _;
    # resolver 127.0.0.11:53 223.5.5.5 valid=10s;
    resolver 127.0.0.11:53 valid=10s;
    # resolver_timeout 1s;

    error_log  /usr/local/openresty/nginx/logs/error.log  info;

    # 用于满足 Nginx 配置的占位符
    # ssl_certificate /etc/nginx/ssl/default.crt;
    # ssl_certificate_key /etc/nginx/ssl/default.key;
    ssl_certificate /etc/nginx/server.crt;
    ssl_certificate_key /etc/nginx/server.key;

    #access_by_lua_block {
    #    ngx.log(ngx.ERR, "access_by_lua_block---------------------")
    #    ngx.ctx.domain = ngx.var.host
    #}

    ssl_certificate_by_lua_block {
            -- ngx.log(ngx.ERR, "qqqqqqqq")
            local ssl = require "ngx.ssl"

        local ok, err = ssl.clear_certs()
        if not ok then
            ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates")
            return ngx.exit(ngx.ERROR)
        end
        

        -- ngx.log(ngx.ERR, "ggggggggggggggg")
        local ssl_dir = "/etc/nginx/ssl"
        -- ngx.log(ngx.ERR, "ggggggggggggggg---1")
        -- ngx.log(ngx.ERR, ngx.config.ngx_lua_version)
        
        -- 没有处理默认www的情况
        local domain, err = ssl.server_name()
        
        if not ok then
            ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates")
            return ngx.exit(ngx.ERROR)
        end

        if domain then
            ngx.log(ngx.INFO, "domain=" .. domain)
        else
            -- 不支持 curl -H 'Host:www.baidu.com' https://172.18.0.12
            ngx.log(ngx.ERR, "domain 为空，不支持在Header里指定Host")
            return ngx.exit(ngx.ERROR)
        end
        
        -- print('ggggggggggggggg---a')
        -- print(ngx)
        -- local domain = ngx.ctx.domain
        -- local domain = ngx.var.host
        -- ngx.log(ngx.ERR, "ggggggggggggggg---2")
        -- ngx.log(ngx.ERR, domain)
        local cert_path = ssl_dir .. "/" .. domain .. ".crt"
        -- ngx.log(ngx.ERR, "ggggggggggggggg---3")
        local key_path = ssl_dir .. "/" .. domain .. ".key"
        
        ngx.log(ngx.INFO, cert_path)
        ngx.log(ngx.INFO, key_path)

        -- local has_cert = (ngx.req.get_headers()["Host"] == domain) and (file_exists(cert_path))

        -- if has_cert then
            -- 获取证书内容，比如 io.open("my.crt"):read("*a")

            local file = io.open(cert_path, "r")
            local cert_data = ''
            if file then
                cert_data = file:read("*a")
                file:close()
            else
                -- 没有就报错了，proxy_connect
                ngx.log(ngx.ERR, cert_path .. " 内容为空")
                return ngx.exit(ngx.ERROR)
            end

            local pkey_data = ''
            file = io.open(key_path, "r")
            if file then
                pkey_data = file:read("*a")
                file:close()
            end

            -- ngx.ctx.ssl_certificate = cert_data
            -- ngx.ctx.ssl_certificate_key = key_data

            -- local cert_data, err = get_my_pem_cert_data()
            if not cert_data then
                ngx.log(ngx.ERR, "failed to get PEM cert: ", err)
                return
            end
            -- 解析出 cdata 类型的证书值，你可以用 lua-resty-lrucache 缓存解析结果
            local cert, err = ssl.parse_pem_cert(cert_data)
            if not cert then
                ngx.log(ngx.ERR, "failed to parse PEM cert: ", err)
                return
            end
            local ok, err = ssl.set_cert(cert)
            if not ok then
                ngx.log(ngx.ERR, "failed to set cert: ", err)
                return
            end
            -- local pkey_data, err = get_my_pem_priv_key_data()
            if not pkey_data then
                ngx.log(ngx.ERR, "failed to get DER private key: ", err)
                return
            end
            local pkey, err = ssl.parse_pem_priv_key(pkey_data)
            if not pkey then
                ngx.log(ngx.ERR, "failed to parse pem key: ", err)
                return
            end
            local ok, err = ssl.set_priv_key(pkey)
            if not ok then
                ngx.log(ngx.ERR, "failed to set private key: ", err)
                return
            end
        -- end
            -- ngx.log(ngx.ERR, "eeeeeeeeeeeeeeeeeeeeee")
    }

    location / {
        # resolver 192.168.3.1;
        # resolver_timeout 1s;
        # set $lua_max_body_size '200M';
        # client_max_body_size 200M;
        client_max_body_size --client_max_body_size--;

        # set $scheme 'https';
        set $proxy_pass 'https://www.baidu.com';
        add_header       X-Served-By $host;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Scheme $scheme;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_pass $proxy_pass;

    access_by_lua_block {

        -- ngx.var.lua_max_body_size = os.getenv("CLIENT_MAX_BODY_SIZE")

        local ssl_dir = "/etc/nginx/ssl"
        local domain = ngx.var.host
        local cert_path = ssl_dir .. "/" .. domain .. ".crt"
        local key_path = ssl_dir .. "/" .. domain .. ".key"

        if os.getenv("PROXY_PASS_ALL") then
            # 设置了全局指向
            ngx.log(ngx.INFO, "PROXY_PASS_ALL=" .. os.getenv("PROXY_PASS_ALL"))
            ngx.var.proxy_pass = os.getenv("PROXY_PASS_ALL") .. ngx.var.request_uri
        else

        -- local has_cert = (file_exists(cert_path))
        
            local has_cert = false
            local file = io.open(cert_path, "r")
            if file then
                file:close()
                has_cert= true
            end

            -- ngx.log(ngx.INFO, 'has_cert=' .. has_cert)
            if has_cert then
                
                ngx.log(ngx.INFO, "proxy_pass=" .. domain)
                -- ngx.var.ssl = "on"
                -- ngx.var.ssl_certificate = cert_path
                -- ngx.var.ssl_certificate_key = key_path
                ngx.var.proxy_pass = "https://" .. domain .. ngx.var.request_uri
                -- ngx.var.proxy_pass = "https://" .. domain
            else
                ngx.log(ngx.INFO, "proxy_pass=default")
                ngx.var.proxy_pass = os.getenv("PROXY_PASS_DEFAULT") .. ngx.var.request_uri
                -- ngx.var.proxy_pass = "https://www.baidu.com"
            end
        end
    }
    #rewrite_by_lua_block {
    #    ngx.req.set_uri(ngx.var.proxy_pass)
    #}
    }

}

# function file_exists(path)
#     local file = io.open(path, "r")
#     if file then
#         file:close()
#         return true
#     else
#         return false
#     end
# end







