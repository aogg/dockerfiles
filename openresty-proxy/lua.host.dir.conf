
# 必须
resolver 127.0.0.11;      

log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$host" "$upstream_addr"';

access_log  logs/access.log  main;

# Accept: text/event-stream
server{

    server_name  ~^(?P<host_path>.*)\.(?P<container_name>.*)\.port\.(?P<port>.*)\.http_version1\.proxy_sslip(?P<sslip_suffix>\.\d+\.\d+\.\d+\.\d+\.sslip\.io)$;
    listen 80;

    client_max_body_size --client_max_body_size--;

    location / {
        # proxy_set_header Host $host_path$sslip_suffix;
        proxy_set_header Host $host;
        proxy_pass http://$container_name:$port;
        proxy_set_header X-Real-IP $remote_addr; 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade; 
        proxy_set_header Connection "Upgrade"; 
        proxy_http_version 1.1;
    }


}


server{

    server_name  ~^(?P<host_path>.*)\.(?P<container_name>.*)\.port\.(?P<port>.*)\.host\.(?P<host_local>.*)\.proxy_sslip(?P<sslip_suffix>\.\d+\.\d+\.\d+\.\d+\.sslip\.io)$;
    listen 80;

    client_max_body_size --client_max_body_size--;

    location / {
        # proxy_set_header Host $host_path$sslip_suffix;
        proxy_set_header Host $host_local;
        proxy_pass http://$container_name:$port;
        proxy_set_header X-Real-IP $remote_addr; 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade; 
        proxy_set_header Connection "Upgrade"; 
    }


}

server{

    server_name  ~^(?P<host_path>.*)\.(?P<container_name>.*)\.port\.(?P<port>.*)\.proxy_sslip(?P<sslip_suffix>\.\d+\.\d+\.\d+\.\d+\.sslip\.io)$;
    listen 80;

    client_max_body_size --client_max_body_size--;

    location / {
        # proxy_set_header Host $host_path$sslip_suffix;
        proxy_set_header Host $host;
        proxy_pass http://$container_name:$port;
        proxy_set_header X-Real-IP $remote_addr; 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade; 
        proxy_set_header Connection "Upgrade"; 
    }


}


# 1级目录匹配代理
server{

    server_name  ~^(?<host_path>.*)\.(?<scheme_local>https|http)_path\.proxy_sslip(?<sslip_suffix>\.\d+\.\d+\.\d+\.\d+\.sslip\.io)$;
    listen 80;

    client_max_body_size --client_max_body_size--;

    location / {
        # 预先声明变量，以避免 Nginx 在启动/重载时因找不到变量而报错
        set $proxy_pass_target "";

        # 使用 Lua 高效、安全地解析路径并设置变量
        rewrite_by_lua_block {
            -- 1. 从 URI 中提取第一级目录
            --    例如 /app-8080/path -> app-8080
            local first_dir = ngx.re.match(ngx.var.request_uri, "^/([^/]+)")
            if not first_dir then
                ngx.log(ngx.ERR, "Could not find first path segment in URI: ", ngx.var.request_uri)
                return ngx.exit(400) -- Bad Request
            end

            -- 2. 从第一级目录中解析容器名和端口
            --    例如 app-8080 -> "app", "8080"
            local parts = ngx.re.match(first_dir[1], "^(.*)--(\\d+)$")
            if not parts or not parts[1] or not parts[2] then
                ngx.log(ngx.ERR, "First path segment is not in 'name-port' format: ", first_dir[1])
                return ngx.exit(400) -- Bad Request
            end

            local container_name = parts[1]
            local port_local = parts[2]

            -- 3. 设置 proxy_pass 变量
            --    ngx.var.scheme_local 来自 server_name 的正则捕获
            ngx.var.proxy_pass_target = ngx.var.scheme_local .. "://" .. container_name .. ":" .. port_local
            ngx.log(ngx.INFO, "proxy_pass_target: ", ngx.var.proxy_pass_target)
        }

        proxy_set_header Host $host;
        # 使用变量来设置 proxy_pass
        proxy_pass $proxy_pass_target;
        proxy_set_header X-Real-IP $remote_addr; 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade; 
        proxy_set_header Connection "Upgrade"; 
    }
}


# 无特定框架，最后匹配
server{

    server_name  ~^(?P<host_path>.*)\.(?P<container_name>.*)\.proxy_sslip(?P<sslip_suffix>\.\d+\.\d+\.\d+\.\d+\.sslip\.io)$;
    listen 80;

    client_max_body_size --client_max_body_size--;

    location / {
        # proxy_set_header Host $host_path$sslip_suffix;
        proxy_set_header Host $host;
        proxy_pass http://$container_name;
        proxy_set_header X-Real-IP $remote_addr; 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade; 
        proxy_set_header Connection "Upgrade"; 
    }


}
